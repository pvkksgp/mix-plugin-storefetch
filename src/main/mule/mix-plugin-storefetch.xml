<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:redis="http://www.mulesoft.org/schema/mule/redis" xmlns:validation="http://www.mulesoft.org/schema/mule/validation" 
xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd 
http://www.mulesoft.org/schema/mule/validation http://www.mulesoft.org/schema/mule/validation/current/mule-validation.xsd
http://www.mulesoft.org/schema/mule/redis http://www.mulesoft.org/schema/mule/redis/current/mule-redis.xsd">
	<redis:redis-config name="AWS_ElastiCache_Connection_Clustered" doc:name="Redis Redis" doc:id="f107357c-b091-4447-b67f-18aa9851d974" >
		<redis:clustered-connection clusterHosts="${aws.elasticache.url.list}" entryTTL="${aws.elasticache.ttl}" maxTotal="${aws.elasticache.maxTotal}" maxIdle="${aws.elasticache.maxIdle}" minIdle="${aws.elasticache.minIdle}" maxWaitMillis="${aws.elasticache.maxWaitMillis}" minEvictableIdleTimeMillis="${aws.elasticache.minEvictableIdleTimeMillis}" softMinEvictableIdleTimeMillis="${aws.elasticache.softMinEvictableIdleTimeMillis}" numTestsPerEvictionRun="${aws.elasticache.numTestsPerEvictionRun}" timeBetweenEvictionRunsMillis="${aws.elasticache.timeBetweenEvictionRunsMillis}" connectionTimeout="${aws.elasticache.connection.timeout}" password='#[if("${secure::aws.elasticache.password}" != null and "${secure::aws.elasticache.password}" != "") "${secure::aws.elasticache.password}" else null]'>
			<reconnection>
				<reconnect frequency="${aws.elasticache.reconnect.frequency}" count="${aws.elasticache.reconnect.attempts}" />
			</reconnection>
		</redis:clustered-connection>
	</redis:redis-config>
	<redis:redis-config name="AWS_ElastiCache_Connection_Standalone" doc:name="Redis Redis" doc:id="14b922d5-2874-466d-a5a2-410348039293" >
		<redis:nonclustered-connection host='#[splitBy(splitBy("${aws.elasticache.url.list}", ",")[0], ":")[0]]' port='#[splitBy(splitBy("${aws.elasticache.url.list}", ",")[0], ":")[1]]' password='#[if("${secure::aws.elasticache.password}" != null and "${secure::aws.elasticache.password}" != "") "${secure::aws.elasticache.password}" else null]' entryTTL="${aws.elasticache.ttl}" />
	</redis:redis-config>
	<configuration-properties doc:name="Configuration properties" doc:id="a25b7a1f-245f-441d-9687-13f38e5a1747" file="mule-config-properties.yaml" />
	<flow name="store-event" doc:id="7b3008c1-a729-4c1c-91de-14169e33b007" >
		<validation:is-not-blank-string doc:name="Validate Event Type" doc:id="f4e4ed32-de2e-4a63-bf64-42fe1bbd292b" value="#[payload.metadata.eventType]" message="eventType is missing in the payload metadata" />
		<ee:transform doc:name="Payload to JSON" doc:id="8a0457b6-2ef0-4c3e-9d24-bb2f2de2b8be" >
			<ee:message >
			</ee:message>
			<ee:variables >
				<ee:set-variable variableName="messagePayload" ><![CDATA[%dw 2.0
output application/json
---
payload]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		<ee:transform doc:name="Extract and Enrich Metadata" doc:id="a343313f-51f3-46c4-b933-99a883e655b9" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/java
---
{
	key: payload.metadata.eventType,
	field: payload.metadata.eventId default uuid(),
	value: vars.messagePayload.^raw as String
}]]></ee:set-payload>
			</ee:message>
			<ee:variables >
				<ee:set-variable variableName="connectionRef" ><![CDATA[%dw 2.0
output application/java
---
if(p('aws.elasticache.clustered') == "true") "AWS_ElastiCache_Connection_Clustered" 
else "AWS_ElastiCache_Connection_Standalone"]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		<choice doc:name="Choice" doc:id="58d1e4c9-b7b6-412e-b011-568f7379f433" >
			<when expression='#["${aws.elasticache.clustered}" == "true"]'>
				<redis:set-in-hash doc:name="Store Event" doc:id="2060b000-07a9-4f04-8693-0515786f98ca" key="#[payload.key]" field="#[payload.field]" ifNotExists="true" target="eventStoreResponse" config-ref="AWS_ElastiCache_Connection_Clustered">
			<error-mapping sourceType="REDIS:CONNECTIVITY" targetType="EVENT_STORE:CONNECTIVITY" />
			<error-mapping sourceType="REDIS:INVALID_CONFIGURATION" targetType="EVENT_STORE:INVALID_CONFIGURATION" />
			<error-mapping sourceType="REDIS:INVALID_REQUEST_DATA" targetType="EVENT_STORE:INVALID_REQUEST_DATA" />
			<error-mapping sourceType="REDIS:INVALID_STRUCTURE_FOR_INPUT_DATA" targetType="EVENT_STORE:INVALID_STRUCTURE_FOR_INPUT_DATA" />
			<error-mapping sourceType="REDIS:RETRY_EXHAUSTED" targetType="EVENT_STORE:RETRY_EXHAUSTED" />
			<error-mapping sourceType="REDIS:UNABLE_TO_UNSUBSCRIBE" targetType="EVENT_STORE:UNABLE_TO_UNSUBSCRIBE" />
			<error-mapping sourceType="REDIS:UNKNOWN" targetType="EVENT_STORE:UNKNOWN" />
			<reconnect frequency="${aws.elasticache.reconnect.frequency}" count="${aws.elasticache.reconnect.attempts}" />
			<redis:value><![CDATA[#[payload.value]]]></redis:value>
		</redis:set-in-hash>
			</when>
			<otherwise >
				<redis:set-in-hash doc:name="Store Event" doc:id="9b1a09c6-5f23-4f69-b28d-ae02d8ef54bc" key="#[payload.key]" field="#[payload.field]" ifNotExists="true" target="eventStoreResponse" config-ref="AWS_ElastiCache_Connection_Standalone">
			<error-mapping sourceType="REDIS:CONNECTIVITY" targetType="EVENT_STORE:CONNECTIVITY" />
			<error-mapping sourceType="REDIS:INVALID_CONFIGURATION" targetType="EVENT_STORE:INVALID_CONFIGURATION" />
			<error-mapping sourceType="REDIS:INVALID_REQUEST_DATA" targetType="EVENT_STORE:INVALID_REQUEST_DATA" />
			<error-mapping sourceType="REDIS:INVALID_STRUCTURE_FOR_INPUT_DATA" targetType="EVENT_STORE:INVALID_STRUCTURE_FOR_INPUT_DATA" />
			<error-mapping sourceType="REDIS:RETRY_EXHAUSTED" targetType="EVENT_STORE:RETRY_EXHAUSTED" />
			<error-mapping sourceType="REDIS:UNABLE_TO_UNSUBSCRIBE" targetType="EVENT_STORE:UNABLE_TO_UNSUBSCRIBE" />
			<error-mapping sourceType="REDIS:UNKNOWN" targetType="EVENT_STORE:UNKNOWN" />
			<reconnect frequency="${aws.elasticache.reconnect.frequency}" count="${aws.elasticache.reconnect.attempts}" />
			<redis:value><![CDATA[#[payload.value]]]></redis:value>
		</redis:set-in-hash>
			</otherwise>
		</choice>
		<ee:transform doc:name="Set Outgoing Payload" doc:id="f227df2e-21f5-45dd-a812-0a09bfcc5b97" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/java
---
{
	metadata: {
		eventType: payload.key,
		eventId: payload.field		
	}	
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</flow>
	<flow name="fetch-event" doc:id="ea1e28c8-570b-49ae-89dc-81599a8f0ead" >
		<validation:all doc:name="All" doc:id="b0a135a3-d7f4-482e-80d2-416621fc32ab" >
			<validation:is-not-blank-string doc:name="Validate Event Type" doc:id="cc8eced6-00d6-4f03-9531-76a93fc67f35" value="#[payload.metadata.eventType]" message="eventType is missing in the payload metadata"/>
			<validation:is-not-blank-string doc:name="Validate Event ID" doc:id="5e0bc535-1806-4ebd-a278-558fee98458e" value="#[payload.metadata.eventId]" message="eventId is missing in the payload metadata"/>
		</validation:all>
		<ee:transform doc:name="Extract Metadata" doc:id="2b84916b-dffa-4fa9-8db1-052d69533d34" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/java
---
{
	key: payload.metadata.eventType,
	field: payload.metadata.eventId
}]]></ee:set-payload>
			</ee:message>
			<ee:variables >
				<ee:set-variable variableName="connectionRef" ><![CDATA[%dw 2.0
output application/java
---
if(p('aws.elasticache.clustered') == "true") "AWS_ElastiCache_Connection_Clustered" 
else "AWS_ElastiCache_Connection_Standalone"]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		<choice doc:name="Choice" doc:id="b27d5910-c8ca-48c0-84d8-8ca0cba3058d" >
			<when expression='#["${aws.elasticache.clustered}" == "true"]'>
				<redis:get-from-hash doc:name="Fetch Event" doc:id="d0c105f0-5ff1-4155-9b7e-54430f9c8a19" key="#[payload.key]" field="#[payload.field]" config-ref="AWS_ElastiCache_Connection_Clustered">
		<error-mapping sourceType="REDIS:CONNECTIVITY" targetType="EVENT_STORE:CONNECTIVITY" />
			<error-mapping sourceType="REDIS:INVALID_CONFIGURATION" targetType="EVENT_STORE:INVALID_CONFIGURATION" />
			<error-mapping sourceType="REDIS:INVALID_REQUEST_DATA" targetType="EVENT_STORE:INVALID_REQUEST_DATA" />
			<error-mapping sourceType="REDIS:INVALID_STRUCTURE_FOR_INPUT_DATA" targetType="EVENT_STORE:INVALID_STRUCTURE_FOR_INPUT_DATA" />
			<error-mapping sourceType="REDIS:RETRY_EXHAUSTED" targetType="EVENT_STORE:RETRY_EXHAUSTED" />
			<error-mapping sourceType="REDIS:UNABLE_TO_UNSUBSCRIBE" targetType="EVENT_STORE:UNABLE_TO_UNSUBSCRIBE" />
			<error-mapping sourceType="REDIS:UNKNOWN" targetType="EVENT_STORE:UNKNOWN" />
			<reconnect frequency="${aws.elasticache.reconnect.frequency}" count="${aws.elasticache.reconnect.attempts}" />
		</redis:get-from-hash>
			</when>
			<otherwise >
				<redis:get-from-hash doc:name="Fetch Event" doc:id="b5e309f3-a9a0-4d82-be74-3608efb7eeb9" key="#[payload.key]" field="#[payload.field]" config-ref="AWS_ElastiCache_Connection_Standalone">
		<error-mapping sourceType="REDIS:CONNECTIVITY" targetType="EVENT_STORE:CONNECTIVITY" />
			<error-mapping sourceType="REDIS:INVALID_CONFIGURATION" targetType="EVENT_STORE:INVALID_CONFIGURATION" />
			<error-mapping sourceType="REDIS:INVALID_REQUEST_DATA" targetType="EVENT_STORE:INVALID_REQUEST_DATA" />
			<error-mapping sourceType="REDIS:INVALID_STRUCTURE_FOR_INPUT_DATA" targetType="EVENT_STORE:INVALID_STRUCTURE_FOR_INPUT_DATA" />
			<error-mapping sourceType="REDIS:RETRY_EXHAUSTED" targetType="EVENT_STORE:RETRY_EXHAUSTED" />
			<error-mapping sourceType="REDIS:UNABLE_TO_UNSUBSCRIBE" targetType="EVENT_STORE:UNABLE_TO_UNSUBSCRIBE" />
			<error-mapping sourceType="REDIS:UNKNOWN" targetType="EVENT_STORE:UNKNOWN" />
			<reconnect frequency="${aws.elasticache.reconnect.frequency}" count="${aws.elasticache.reconnect.attempts}" />
		</redis:get-from-hash>
			</otherwise>
		</choice>
		<ee:transform doc:name="Set Outgoing Payload" doc:id="cfa0274e-7bde-403e-a25a-25fa9036a0d7" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/java
---
if(payload != null) read(payload,"application/json") 
else payload]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</flow>
</mule>
